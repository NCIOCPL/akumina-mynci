#region Namespace Imports


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;


#endregion Namespace Imports


namespace NCI.PeopleSync.Customization
{


    class NEDService
    {


        protected int _HttpTimeout = 60;
        string _NEDApiUrl = string.Empty;
        string _NEDMembershipReportUrl = string.Empty;
        string _username = string.Empty;
        string _password = string.Empty;

        public NEDService()
        {

            //TODO: Need to work with Diego to figure out why the embedded resource isn't
            //TODO: being reflected. I've inspected the internals of the assembly, and it's
            //TODO: definitely there with the assigned values.
            //    string resourceName = "NCI.PeopleSync.Customization.nciappsettings.json";

            //    Assembly assembly = Assembly.GetExecutingAssembly();

            //    // Read the embedded resource
            //    using (Stream stream = assembly.GetManifestResourceStream(resourceName))
            //    {
            //        if (stream != null)
            //        {
            //            using (StreamReader reader = new StreamReader(stream))
            //            {
            //                string jsonContent = reader.ReadToEnd();
            //                //Console.WriteLine(jsonContent);                        
            //                var settings = JsonConvert.DeserializeObject<NEDAppSettings>(jsonContent);
            //                _NEDApiUrl = settings.AppSettings.NEDReportUrl;
            //                _username = settings.AppSettings.NEDUser;
            //                _password = settings.AppSettings.NEDPassword;
            //            }
            //        }
            //    }

            // Workaround in order to debug
            _NEDApiUrl = "https://####/NEDPERSONREST?Email="; // TO-DO from OCPL: move this to configuration; stripped from code for now
            _username = "####"; // TO-DO from OCPL: move this to configuration; stripped from code for now
            _password = "####"; // TO-DO from OCPL: move this to configuration; stripped from code for now

        }


        public async Task<string> FetchUserFromNED(string mail)
        {
            string NEDApiUrl = _NEDApiUrl;
            string username = _username;
            string password = _password;

            // Create an HttpClient instance with a longer timeout
            using (HttpClient client = new HttpClient())
            {
                // Set up basic authentication
                var byteArray = System.Text.Encoding.ASCII.GetBytes($"{username}:{password}");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));

                // Set a longer timeout (for example, 5 minutes)
                client.Timeout = TimeSpan.FromMinutes(_HttpTimeout);

                // Make a request to the NED API
                HttpResponseMessage response = await client.GetAsync($"{NEDApiUrl}{mail}");

                // Check if the request was successful
                if (response.IsSuccessStatusCode)
                {
                    // Read and process the response content
                    string responseData = await response.Content.ReadAsStringAsync();
                    return responseData;
                }
                else
                {
                    // Handle the error
                    Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
                    return "";
                }
            }
        }


        public static string GetValueFromXml(string xpathSearch, string xml)
        {
            XmlNodeList xpathNodes;
            string returnVal;
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(xml);
            xpathNodes = doc.SelectNodes(xpathSearch, GetNamespaceManager(doc));
            if (null == xpathNodes || xpathNodes.Count == 0)
            {
                returnVal = String.Empty;
            }
            else
            {
                returnVal = xpathNodes[0].InnerText;
            }
            return returnVal;
        }


        public static XmlNamespaceManager GetNamespaceManager(XmlDocument doc)
        {
            XmlNamespaceManager nsManager = new XmlNamespaceManager(doc.NameTable);
            nsManager.AddNamespace("ns0", "http://www.nih.gov/NEDPersonV7");
            return nsManager;
        }

        private class NEDAppSettings
        {
            public Appsettings AppSettings { get; set; }

            public class Appsettings
            {
                public string NEDUser { get; set; }
                public string NEDPassword { get; set; }
                public string NEDReportUrl { get; set; }
                public string NEDMembershipReportUrl { get; set; }
            }

        }
        private class MemberShipUser
        {
            public string Name { get; set; }
            public string EnrolledAs { get; set; }
        }
    }


}
