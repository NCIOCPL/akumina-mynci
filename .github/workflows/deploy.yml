name: Deploy Site
run-name: Deploy Site - CDN${{ inputs.deploy-widgets && ', Widgets' || '' }}${{ inputs.deploy-lists && ', Lists' || '' }}
on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
      deploy-widgets:
        description: Pack and deploy widgets
        type: boolean
        default: false
      deploy-lists:
        description: Deploy lists (TBD)
        type: boolean
        default: false

jobs:
  deploy:
    name: Deploy
    runs-on: windows-latest
    environment: ${{inputs.environment}}
    defaults:
      run:
        working-directory: site

    steps:
      ########## Preparation ##########

      # Checkout the code
      - name: Checkout branch
        uses: actions/checkout@v3

      # Sets up our deployment 
      - uses: "./.github/workflows/composite/setup"


      ########## Widget Package ##########

      # Update widget tokens
      # Our own solution instead of --tokenMap because we need to replace values inside a JSON object
      # and Akumina's solution only supports string values
      - name: Update widget tokens
        id: tokens
        if: inputs.deploy-widgets
        shell: pwsh
        env:
          WIDGET_TOKENS: ${{ vars.WIDGET_TOKENS }}
        run: |
          $mappingJson = $env:WIDGET_TOKENS
          $mapping = $mappingJson | ConvertFrom-Json

          $TargetDirectory = "src/js/widgets"
          $files = Get-ChildItem -Path $TargetDirectory -Recurse -Filter "*.json"

          foreach ($file in $files) {
              $content = Get-Content $file.FullName -Raw
              $fileReplacements = 0
              foreach ($key in $mapping.PSObject.Properties.Name) {
                  $searchKey = "GHA_$key"
                  $value = $mapping.$key
                  if ($content -match [regex]::Escape($searchKey)) {
                    $content = $content -replace [regex]::Escape($searchKey), $value
                    $fileReplacements++
                  }
              }
              if ($fileReplacements -gt 0) {
                Set-Content -Path $file.FullName -Value $content
                Write-Host "$fileReplacements token(s) replaced with values from GHA environment in $($file.FullName)."
              }
          }
        
      # Package the widgets (must run before build)
      - name: Package widgets
        if: inputs.deploy-widgets
        # npm run package -- --tokenMap "${{ steps.tokens.outputs.WIDGET_TOKEN_STRING }}" 
        run: npm run package

      ########## Build ##########

      # Runs webpack to copy the source to the build folder
      - name: Build
        run: npm run build${{ inputs.environment == 'Prod' && '-prod-ci' || ''}}

      ########## Deploy CDN Assets ##########

      # Assumption is that we always want to update these because deploying widgets needs the widget views on the CDN.

      # Set the deployment type
      - uses: "./.github/workflows/composite/deployment_type"
        with:
          deployment_type: "cdnassets"

      # Runs akumina-widget-builder with the cdnpackage option to prep widgets for deployment
      - name: Package widgets for CDN
        if: inputs.deploy-widgets
        run: npm run cdnpackage

      # Runs site deployer
      - name: Deploy to CDN
        run: npm run deploy
        env:
          assetdirectory: Client
          azurestorageaccountkey: ${{ secrets.azure_storage_account_key }}
          azurestorageaccountname: ${{ vars.azure_storage_account_name }}
          azurestoragecontainer: ${{ vars.azure_storage_account_container }}
          spdirectory: DigitalWorkplace
          envdir: build

      ########## Deploy Widgets ##########

        #run: npm run package ${{ inputs.widget_name }} -- --tokenMap ${{ inputs.token_map }}

      # Set the deployment type
      - uses: "./.github/workflows/composite/deployment_type"
        if: inputs.deploy-widgets
        with:
          deployment_type: "widgets"

      # Runs site deployer
      - name: Deploy widgets
        if: inputs.deploy-widgets
        run: npm run deploy
        env:
          assetdirectory: Client
          clientid: ${{ secrets.client_id}}
          clientsecret: ${{ secrets.client_secret }}
          # Current assumption is that all widget instances are deployed to the Delivery site
          # If we ever go multi-site then we will have to reconsider if this is the correct mechanism
          spurl: ${{ vars.delivery_sp_url }}
          centralspurl: ${{ vars.central_sp_url }}
          spdirectory: DigitalWorkplace
          langid: 1033
          appmanagerurl: ${{ vars.appmanager_url }}
          akquerykey: ${{ secrets.ak_query_key }}
          ml: true
          envdir: build
      
      ########## Deploy Lists ##########

      # TBD

      ########## Cleanup ##########

      # Stores an artifact copy on the workflow run
      - name: Upload built artifact
        uses: actions/upload-artifact@v4
        with:
          path: site/build