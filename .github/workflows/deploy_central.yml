name: Deploy Central Site
on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
      deployment_type:
        type: string
        description: Which Akumina code to deploy
        required: true
      widget_name:
        type: string
        description: Single widget to deploy
      token_map:
        type: string
        description:

jobs:
  deploy:
    name: Deploy to SharePoint
    runs-on: windows-latest
    environment: ${{inputs.environment}}
    defaults:
      run:
        working-directory: site

    steps:
      ## Checkout the code
      - name: Checkout branch
        uses: actions/checkout@v3

      ## Configure the deployment type based on workflow input
      - name: Install jq
        run: |
          Invoke-WebRequest -Uri "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe" -OutFile "jq.exe"
          New-Item -ItemType Directory -Force $env:USERPROFILE\Documents\PowerShell
          New-Item -ItemType File -Force $env:USERPROFILE\Documents\PowerShell\profile.ps1
          Add-Content $Profile.CurrentUserAllHosts 'Set-Alias jq "${pwd}\jq.exe"'
      - name: Modify deployment type
        shell: pwsh
        run: |
          $deployment_type = $env:DEPLOYMENT_TYPE
          if ([string]::IsNullOrWhiteSpace($deployment_type)) {
            # If no string is provided, assume "all" and set everything to false
            "You must provide a deployment type to proceed."
          } else {
            # Split the string on commas and update the JSON file accordingly
            $deployment_types = $deployment_type -split ","
            foreach ($dt in $deployment_types) {
              jq --arg dt $dt '.Options[$dt] = true' akumina.sitedeployer.config.json > tmpfile ; Move-Item -Path tmpfile -Destination akumina.sitedeployer.config.json -Force
            }
          }
        env:
          DEPLOYMENT_TYPE: ${{ inputs.deployment_type }}

      ## Setup node and npm caching
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: "site/.nvmrc"
          cache: 'npm'
          cache-dependency-path: site/package-lock.json
      - name: Run NPM
        run: npm install

      ## Install SiteDeployer
      - name: Install Akumina SiteDeployer
        run: |
          Invoke-WebRequest -Uri "https://github.com/akumina/SiteDeployer/releases/download/6.0.2301.1505/6.0.2301.1505-Akumina.SiteDeployer.zip" -OutFile "sd.zip"
          $ExtractPath = "tools"
          if (-not (Test-Path -Path $ExtractPath)) {
              New-Item -ItemType Directory -Path $ExtractPath | Out-Null
          }
          Expand-Archive -Path "sd.zip" -DestinationPath $ExtractPath -Force
          Remove-Item -Path "sd.zip"
        shell: pwsh

      ## Build the package
      - name: Build
        run: npm run build

      - name: Package
      # TO-DO: Find out of if the tokenMap is really needed
        #run: npm run package ${{ inputs.widget_name }} -- --tokenMap ${{ inputs.token_map }}
        run: npm run package ${{ inputs.widget_name }}

      - name: Upload built artifact
        uses: actions/upload-artifact@v4
        with:
          path: site/build

      ## Deploy the code
      #
      # See documentation:
      # - https://akumina.github.io/docs/Site-Deployer-Overview.html
      # - https://github.com/akumina/SiteDeployer
      # - https://akumina.github.io/docs/Widget-Development-Configuring-akumina-sitedeployer-config
      # - https://akumina.github.io/docs/Site-Deployer-Continuous-Site-Package-Deployment-via-a-console-app.html
      # 
      # We have chosen to use the tools/deploy.js script which reads from akumina.sitedeployer.config.json
      - name: Deploy to Central
        run: npm run deploy
        env:
          assetdirectory: Client
          clientid: ${{ secrets.client_id}}
          clientsecret: ${{ secrets.client_secret }}
          spurl: ${{ vars.central_sp_url }}
          spdirectory: DigitalWorkplace
          ml: true
          envdir: ${{ github.workspace }}\site\build\